{
  "root": true,
  "plugins": ["@nrwl/nx"],
  "parserOptions": {
    "project": ["./tsconfig.eslint.json", "./tsconfig.spec.json"]
  },
  "overrides": [
    {
      "quotes": "single",
      "files": ["*.ts", "*.js"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "warn",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts"],
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.ts"],
      "extends": [
        "plugin:@nrwl/nx/angular",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:jest/recommended"
      ],
      "rules": {
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-class-suffix": "error",
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-attribute-decorator": "error",
        "@angular-eslint/no-empty-lifecycle-method": "off",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "off",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "off",
        "@angular-eslint/no-output-rename": "off",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/prefer-on-push-component-change-detection": "error",
        "@angular-eslint/prefer-output-readonly": "off",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/array-type": [
          "warn",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/ban-ts-comment": "error",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "{}": false,
              "Object": false,
              "Function": false
            },
            "extendDefaults": true
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/explicit-function-return-type": [
          "warn",
          {
            "allowDirectConstAssertionInArrowFunctions": true,
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": ["instance-field", "constructor", "instance-method"]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "format": null,
            "custom": {
              "regex": "^([^_]*|[A-Z0-9_]*)$",
              "match": true
            },
            "leadingUnderscore": "allow"
          },
          {
            "selector": "parameter",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": ["objectLiteralProperty", "typeProperty"],
            "format": null
          },
          {
            "selector": ["enumMember"],
            "format": ["PascalCase", "UPPER_CASE"]
          },
          {
            "selector": ["classProperty"],
            "format": ["camelCase", "PascalCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": ["parameterProperty"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^I[A-Z]",
              "match": false
            }
          },
          {
            "selector": "enum",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^E[A-Z]",
              "match": false
            }
          },
          {
            "selector": "typeAlias",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^T[A-Z]",
              "match": false
            }
          }
        ],
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-shadow": [
          "off",
          {
            "hoist": "all"
          }
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "_"
          }
        ],
        "@typescript-eslint/no-useless-constructor": ["error"],
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-function-type": "off",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-ts-expect-error": "off",
        // enable when typescript will be > 3.9
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/semi": ["off", null],
        "@typescript-eslint/triple-slash-reference": "off",
        "@typescript-eslint/unified-signatures": "off",
        "arrow-parens": ["off", "always"],
        "brace-style": ["off", "off"],
        "camelcase": ["off"],
        "comma-dangle": "off",
        "curly": "error",
        "eol-last": "off",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "off",
        "id-length": [
          "error",
          {
            "exceptionPatterns": ["^(x|y|z|i|j|_|.{2,})$"],
            "properties": "never"
          }
        ],
        "id-match": "error",
        "linebreak-style": "on",
        "max-classes-per-file": ["error", 4],
        "max-len": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-case-declarations": "off",
        "no-cond-assign": "error",
        "no-constant-condition": "error",
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": true
          }
        ],
        "no-eval": "error",
        "no-extra-semi": "off",
        "no-fallthrough": "error",
        "no-irregular-whitespace": "off",
        "no-multiple-empty-lines": "off",
        "no-prototype-builtins": "off",
        "no-redeclare": "off",
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              "rxjs/Rx",
              "rxjs/Observable",
              "rxjs/Subject",
              "rxjs/BehaviorSubject",
              "rxjs/index",
              "rxjs/internal-compatibility",
              "rxjs/internal",
              "date-fns",
              "lodash"
            ],
            "patterns": ["**/src/*", "rxjs/internal/*", "!./src/*"]
          }
        ],
        "no-trailing-spaces": "off",
        "no-useless-constructor": "off",
        "no-var": "error",
        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "quote-props": "off",
        "radix": "off",
        "rxjs/no-async-subscribe": "error",
        "rxjs/no-create": "error",
        "rxjs/no-ignored-replay-buffer": "error",
        "rxjs/no-internal": "error",
        "rxjs/no-nested-subscribe": "error",
        "rxjs/no-sharereplay": [
          "error",
          {
            "allowConfig": true
          }
        ],
        "rxjs/no-unsafe-takeuntil": [
          "error",
          {
            "alias": ["takeUntil"]
          }
        ],
        "rxjs-angular/prefer-takeuntil": [
          "error",
          {
            "alias": ["takeUntil"],
            "checkComplete": false,
            "checkDecorators": ["Component", "Directive"],
            "checkDestroy": false
          }
        ],
        "space-before-function-paren": "on",
        "space-in-parens": ["on", "never"],
        "spaced-comment": [
          "error",
          "always",
          {
            "markers": ["/"],
            "exceptions": ["*"]
          }
        ],
        "unicorn/filename-case": "error"
      },
      "plugins": [
        "eslint-plugin-unicorn",
        "@angular-eslint/eslint-plugin",
        "eslint-plugin-rxjs",
        "@typescript-eslint",
        "rxjs-angular"
      ]
    },
    {
      "files": ["*.html"],
      "plugins": ["html"]
    },
    {
      "files": ["*.component.html"],
      "extends": ["plugin:@nrwl/nx/angular-template"],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/no-negated-async": "off",
        "@angular-eslint/template/eqeqeq": "error"
      },
      "plugins": ["@angular-eslint/eslint-plugin-template"]
    }
  ],
  "extends": ["plugin:prettier/recommended"]
}
